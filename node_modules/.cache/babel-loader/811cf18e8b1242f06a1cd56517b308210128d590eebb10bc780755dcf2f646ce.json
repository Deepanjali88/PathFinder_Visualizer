{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deepa\\\\my-app\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from '../Node/Node.js';\nimport { dijkstra, getNodesInShortestPathOrderDijkstra } from '../algorithms/dijkstra';\nimport { bfs, getNodesInShortestPathOrderBFS } from '../algorithms/bfs';\nimport { dfs, getNodesInShortestPathOrderDFS } from '../algorithms/dfs';\nimport './PathfindingVisualizer.css';\nimport red from '../Img/Red.png';\nimport green from '../Img/green.png';\nimport yellow from '../Img/yellow.jpeg';\nimport blue from '../Img/blue.png';\nimport { Button, Navbar, Image } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet sr = 7;\nlet sc = 15;\nlet fr = 18;\nlet fc = 45;\nexport default class Visualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      START_NODE_ROW: 7,\n      START_NODE_COL: 15,\n      FINISH_NODE_ROW: 18,\n      FINISH_NODE_COL: 45,\n      done: false,\n      changedSource: false,\n      changedDest: false,\n      stop: false\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  handleMouseDown(row, col) {\n    const node = this.state.grid[row][col];\n    if (this.state.changedSource === true) {\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-src';\n      this.setState({\n        START_NODE_ROW: row,\n        START_NODE_COL: col,\n        changedSource: false\n      }, () => {\n        //console.log(\"changed source true section\");\n        //console.log(this.state.START_NODE_ROW);\n      });\n\n      //console.log(this.state.START_NODE_ROW);\n      //console.log(row);\n    } else if (this.state.changedDest === true) {\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-dest';\n      this.setState({\n        FINISH_NODE_ROW: row,\n        FINISH_NODE_COL: col,\n        changedDest: false\n      }, () => {\n        //console.log(\"changed dest true section\");\n        //console.log(this.state.FINISH_NODE_ROW);\n      });\n    } else if (row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL && this.state.changedSource === false) {\n      const newGrid = setPreviousSourcef(this.state.grid, row, col);\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n      //console.log(this.state.START_NODE_ROW);\n      this.setState({\n        grid: newGrid,\n        changedSource: true\n      }, () => {\n        console.log(\"Current start node row \");\n        console.log(this.state.START_NODE_ROW);\n      });\n    } else if (row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL && this.state.changedDest === false) {\n      const newGrid = setPreviousDestf(this.state.grid, row, col);\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n      //console.log(this.state.START_NODE_ROW);\n      this.setState({\n        grid: newGrid,\n        changedDest: true\n      }, () => {\n        console.log(\"Current finish node row \");\n        console.log(this.state.FINISH_NODE_ROW);\n      });\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      }, () => {\n        console.log(\"state changed\");\n      });\n    }\n  }\n  handleMouseEnter(row, col) {\n    if (this.state.changedSource === false || this.state.changedDest === false) {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n  handleMouseUp(row, col) {\n    if (this.state.changedSource === true) {\n      //changing the source\n      console.log(\"changed source true section mouseup\");\n    } else if (this.state.changedDest === true) {\n      //changing destination\n    } else {\n      this.setState({\n        mouseIsPressed: false\n      });\n    }\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (node.row === this.state.START_NODE_ROW && node.col === this.state.START_NODE_COL) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-src';\n        } else if (node.row === this.state.FINISH_NODE_ROW && node.col === this.state.FINISH_NODE_COL) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-dest';\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (node.row === this.state.START_NODE_ROW && node.col === this.state.START_NODE_COL) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-src';\n        } else if (node.row === this.state.FINISH_NODE_ROW && node.col === this.state.FINISH_NODE_COL) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-dest';\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n        }\n      }, 50 * i);\n    }\n  }\n  //the below lines \n  visualizeDijkstra() {\n    if (this.state.done === true) {\n      alert(\"Clear the grid First\");\n    } else {\n      document.getElementById(`node-${this.state.START_NODE_ROW}-${this.state.START_NODE_COL}`).className = 'node node-shortest-path';\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode);\n      // console.log(visitedNodesInOrder);\n      this.setState({\n        'done': true\n      });\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  //the below lines calls the bfs function to traverse the grid\n  visualizeBFS() {\n    // sr = this.state.START_NODE_ROW;\n    // sc = this.state.START_NODE_COL;\n    if (this.state.done === true) {\n      alert(\"Clear the grid First\");\n    } else {\n      console.log(this.state.START_NODE_ROW);\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\n      //console.table(visitedNodesInOrder[0]);\n      // alert(\"BFS is going to execute\");\n      this.setState({\n        'done': true\n      });\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n      //console.log(visitedNodesInOrder.length);\n    }\n  }\n\n  visualizeDFS() {\n    // sr = this.state.START_NODE_ROW;\n    // sc = this.state.START_NODE_COL;\n    if (this.state.done === true) {\n      alert(\"Clear the grid First\");\n      // console.log(\"Clear the grid dfs\");\n    } else {\n      console.log(this.state.START_NODE_ROW);\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode, startNode);\n      this.setState({\n        'done': true\n      });\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n  refresh() {\n    window.location.reload(false);\n  }\n  cleargrid() {\n    // const {grid} = this.state;\n\n    // console.log(\"this is the clear grid\");\n    // console.log(this.state.START_NODE_ROW);\n    sr = this.state.START_NODE_ROW;\n    sc = this.state.START_NODE_COL;\n    fr = this.state.FINISH_NODE_ROW;\n    fc = this.state.FINISH_NODE_COL;\n    this.componentDidMount();\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        document.getElementById(`node-${row}-${col}`).className = 'node';\n      }\n    }\n    document.getElementById(`node-${this.state.START_NODE_ROW}-${this.state.START_NODE_COL}`).className = 'node node-src';\n    document.getElementById(`node-${this.state.FINISH_NODE_ROW}-${this.state.FINISH_NODE_COL}`).className = 'node node-dest';\n    this.setState({\n      'done': false\n    });\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        bg: \"dark\",\n        variant: \"dark\",\n        children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          href: \"#home\",\n          children: [' ', /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => this.refresh(),\n            children: \"Pathfinding Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            size: \"lg\",\n            onClick: () => this.visualizeDijkstra(),\n            children: \"Visualize Dijkstra's Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this), '   ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            size: \"lg\",\n            onClick: () => this.visualizeDFS(),\n            children: \"Visualize DFS Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), '   ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            size: \"lg\",\n            onClick: () => this.visualizeBFS(),\n            children: \"Visualize BFS Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this), '   ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"info\",\n            size: \"lg\",\n            onClick: () => this.cleargrid(),\n            children: \"Clear the GRID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" info \",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Source Node -  \", /*#__PURE__*/_jsxDEV(Image, {\n              src: red,\n              roundedCircle: true,\n              width: \"25\",\n              height: \"25\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 32\n            }, this), ' ', \"Destination Node -  \", /*#__PURE__*/_jsxDEV(Image, {\n              src: green,\n              roundedCircle: true,\n              width: \"25\",\n              height: \"25\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this), ' ', \"Path from source to destination -  \", /*#__PURE__*/_jsxDEV(Image, {\n              src: yellow,\n              roundedCircle: true,\n              width: \"25\",\n              height: \"25\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 52\n            }, this), ' ', \"Obstacle - \", /*#__PURE__*/_jsxDEV(Image, {\n              src: blue,\n              roundedCircle: true,\n              width: \"25\",\n              height: \"25\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: grid.map((row, rowIdx) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeIdx) => {\n                const {\n                  row,\n                  col,\n                  dest,\n                  src,\n                  wall\n                } = node;\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  col: col,\n                  dest: dest,\n                  src: src,\n                  wall: wall,\n                  mouseIsPressed: mouseIsPressed,\n                  onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                  onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                  onMouseUp: (row, col) => this.handleMouseUp(row, col),\n                  row: row\n                }, nodeIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 29\n                }, this);\n              })\n            }, rowIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.freepik.com/vectors/abstract\",\n        children: \"Abstract vector created by BiZkettE1 - www.freepik.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 22\n    }, this);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    src: row === sr && col === sc,\n    dest: row === fr && col === fc,\n    distance: Infinity,\n    isVisited: false,\n    wall: false,\n    previousNode: null\n  };\n};\nconst setPreviousSourcef = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    src: false\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\nconst setPreviousDestf = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    dest: false\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    wall: !node.wall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrderDijkstra","bfs","getNodesInShortestPathOrderBFS","dfs","getNodesInShortestPathOrderDFS","red","green","yellow","blue","Button","Navbar","Image","jsxDEV","_jsxDEV","sr","sc","fr","fc","Visualizer","constructor","props","state","grid","mouseIsPressed","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","done","changedSource","changedDest","stop","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","node","document","getElementById","className","newGrid","setPreviousSourcef","console","log","setPreviousDestf","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animate","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","visualizeDijkstra","alert","startNode","finishNode","visualizeBFS","visualizeDFS","refresh","window","location","reload","cleargrid","render","children","bg","variant","Brand","href","onClick","fileName","_jsxFileName","lineNumber","columnNumber","size","src","roundedCircle","width","height","map","rowIdx","nodeIdx","dest","wall","onMouseDown","onMouseEnter","onMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["C:/Users/deepa/my-app/src/PathfindingVisualizer/PathfindingVisualizer.js"],"sourcesContent":["import React , {Component} from 'react';\r\nimport Node from '../Node/Node.js';\r\nimport {dijkstra, getNodesInShortestPathOrderDijkstra} from '../algorithms/dijkstra';\r\nimport {bfs, getNodesInShortestPathOrderBFS } from '../algorithms/bfs';\r\nimport {dfs, getNodesInShortestPathOrderDFS } from '../algorithms/dfs';\r\nimport './PathfindingVisualizer.css';\r\nimport red from '../Img/Red.png';\r\nimport green from '../Img/green.png';\r\nimport yellow from '../Img/yellow.jpeg';\r\nimport blue from '../Img/blue.png';\r\nimport {Button , Navbar, Image} from 'react-bootstrap';\r\n\r\nlet sr =7;\r\nlet sc =15;\r\nlet fr = 18;\r\nlet fc = 45;\r\n\r\nexport default class Visualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n            mouseIsPressed:false,\r\n            START_NODE_ROW: 7,\r\n            START_NODE_COL:  15,\r\n            FINISH_NODE_ROW:  18,\r\n            FINISH_NODE_COL: 45,\r\n            done: false,\r\n            changedSource: false,\r\n            changedDest: false,\r\n            stop: false,\r\n        }\r\n        \r\n    } \r\n    \r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n      }\r\n    \r\n      handleMouseDown(row, col) {\r\n        const node = this.state.grid[row][col];\r\n        if(this.state.changedSource === true){\r\n         \r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-src';\r\n          this.setState({\r\n            START_NODE_ROW: row,\r\n            START_NODE_COL: col,\r\n            changedSource: false\r\n          }, () =>{\r\n            //console.log(\"changed source true section\");\r\n            //console.log(this.state.START_NODE_ROW);\r\n          } );\r\n         \r\n          //console.log(this.state.START_NODE_ROW);\r\n          //console.log(row);\r\n        }else if(this.state.changedDest === true){\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-dest';\r\n          this.setState({\r\n            FINISH_NODE_ROW: row,\r\n            FINISH_NODE_COL: col,\r\n            changedDest: false\r\n          }, () =>{\r\n            //console.log(\"changed dest true section\");\r\n            //console.log(this.state.FINISH_NODE_ROW);\r\n          } );\r\n        }else if(row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL && this.state.changedSource === false ){ \r\n          \r\n              const newGrid = setPreviousSourcef(this.state.grid,row,col);\r\n              document.getElementById(`node-${node.row}-${node.col}`).className ='node';\r\n              //console.log(this.state.START_NODE_ROW);\r\n              this.setState({\r\n                  grid: newGrid,\r\n                  changedSource: true\r\n              }, () => {\r\n              console.log(\"Current start node row \");\r\n               console.log(this.state.START_NODE_ROW);\r\n              });\r\n        }else if(row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL && this.state.changedDest === false ){ \r\n          \r\n               const newGrid = setPreviousDestf(this.state.grid,row,col);\r\n               document.getElementById(`node-${node.row}-${node.col}`).className ='node';\r\n               //console.log(this.state.START_NODE_ROW);\r\n               this.setState({\r\n               grid: newGrid,\r\n               changedDest: true\r\n               }, () => {\r\n               console.log(\"Current finish node row \");\r\n               console.log(this.state.FINISH_NODE_ROW);\r\n          });\r\n         }else{\r\n                const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n                this.setState({grid: newGrid, mouseIsPressed: true}, () =>{\r\n                console.log(\"state changed\");\r\n        });\r\n        }\r\n       \r\n      }\r\n    \r\n      handleMouseEnter(row, col) {\r\n        if(this.state.changedSource === false || this.state.changedDest === false){\r\n        if (!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    \r\n      handleMouseUp(row,col) {\r\n        \r\n        if (this.state.changedSource === true){\r\n           //changing the source\r\n          console.log(\"changed source true section mouseup\");\r\n        }else if(this.state.changedDest === true){\r\n           //changing destination\r\n        }else {\r\n        this.setState({mouseIsPressed: false});\r\n        }\r\n      }\r\n    \r\n      animate(visitedNodesInOrder,nodesInShortestPathOrder) {\r\n        \r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n          \r\n          if (i === visitedNodesInOrder.length) {\r\n            setTimeout(() => {\r\n              this.animateShortestPath(nodesInShortestPathOrder);\r\n            }, 10 * i);\r\n            return;\r\n          }\r\n             setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            if(node.row === this.state.START_NODE_ROW && node.col === this.state.START_NODE_COL) {\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-src';\r\n            }else if(node.row === this.state.FINISH_NODE_ROW && node.col === this.state.FINISH_NODE_COL){\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-dest';\r\n              \r\n            }else{\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-visited';\r\n            }\r\n          }, 10 * i);\r\n        }\r\n      \r\n      }\r\n    \r\n      animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n          \r\n            setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            if(node.row === this.state.START_NODE_ROW && node.col === this.state.START_NODE_COL) {\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-src';\r\n            }else if(node.row === this.state.FINISH_NODE_ROW && node.col === this.state.FINISH_NODE_COL){\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-dest'; \r\n            }else {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n            }\r\n          }, 50 * i);\r\n        \r\n        }\r\n      }\r\n    //the below lines \r\n      visualizeDijkstra() {\r\n       \r\n        if(this.state.done === true){\r\n          alert(\"Clear the grid First\");\r\n        }else {\r\n        document.getElementById(`node-${this.state.START_NODE_ROW}-${this.state.START_NODE_COL}`).className =\r\n              'node node-shortest-path';\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n        const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        \r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode);\r\n        // console.log(visitedNodesInOrder);\r\n        this.setState({'done' : true});\r\n        this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        }\r\n      }\r\n    \r\n      //the below lines calls the bfs function to traverse the grid\r\n      visualizeBFS() {\r\n        // sr = this.state.START_NODE_ROW;\r\n        // sc = this.state.START_NODE_COL;\r\n        if(this.state.done === true){\r\n          alert(\"Clear the grid First\");\r\n        }else {\r\n          console.log(this.state.START_NODE_ROW);\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n        const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n        const visitedNodesInOrder = bfs(grid,startNode,finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\r\n          //console.table(visitedNodesInOrder[0]);\r\n         // alert(\"BFS is going to execute\");\r\n         this.setState({'done' : true});\r\n          this.animate(visitedNodesInOrder,nodesInShortestPathOrder);\r\n         //console.log(visitedNodesInOrder.length);\r\n        }\r\n      }\r\n\r\n      visualizeDFS() {\r\n        // sr = this.state.START_NODE_ROW;\r\n        // sc = this.state.START_NODE_COL;\r\n        if(this.state.done === true){\r\n          alert(\"Clear the grid First\");\r\n          // console.log(\"Clear the grid dfs\");\r\n          \r\n        }else {\r\n          console.log(this.state.START_NODE_ROW);\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n        const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dfs(grid,startNode,finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode,startNode);\r\n        this.setState({'done' : true});\r\n          this.animate(visitedNodesInOrder,nodesInShortestPathOrder);\r\n        }\r\n      }\r\n       \r\n      refresh (){\r\n          window.location.reload(false);  \r\n      }\r\n    \r\n      cleargrid () {\r\n       // const {grid} = this.state;\r\n          \r\n        // console.log(\"this is the clear grid\");\r\n        // console.log(this.state.START_NODE_ROW);\r\n        sr = this.state.START_NODE_ROW;\r\n        sc = this.state.START_NODE_COL;\r\n        fr = this.state.FINISH_NODE_ROW;\r\n        fc = this.state.FINISH_NODE_COL;\r\n        this.componentDidMount();\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n        for (let row = 0; row < 20; row++) {\r\n          for (let col = 0; col < 50; col++) {\r\n            document.getElementById(`node-${row}-${col}`).className = 'node';\r\n          }\r\n        }\r\n        document.getElementById(`node-${this.state.START_NODE_ROW}-${this.state.START_NODE_COL}`).className = 'node node-src';\r\n        document.getElementById(`node-${this.state.FINISH_NODE_ROW}-${this.state.FINISH_NODE_COL}`).className = 'node node-dest';\r\n        this.setState({'done' : false });\r\n      }\r\n    \r\n        render() {\r\n            const {grid, mouseIsPressed} = this.state;\r\n        \r\n            return ( <div>\r\n              <Navbar bg=\"dark\" variant=\"dark\">\r\n              <Navbar.Brand href=\"#home\">\r\n              {' '}\r\n              <div onClick={() => this.refresh() }>\r\n              Pathfinding Visualizer\r\n              </div>\r\n             </Navbar.Brand>\r\n             </Navbar>\r\n               <div>\r\n               <div className=\"button\">\r\n                <Button variant=\"success\" size=\"lg\" onClick={() => this.visualizeDijkstra() }>\r\n                  Visualize Dijkstra's Algorithm\r\n                </Button>{'   '}\r\n                <Button variant=\"success\" size=\"lg\" onClick={() => this.visualizeDFS() }>\r\n                  Visualize DFS Algorithm\r\n                </Button>{'   '}\r\n                <Button variant=\"success\" size=\"lg\" onClick={() => this.visualizeBFS() }>\r\n                  Visualize BFS Algorithm\r\n                </Button>{'   '}\r\n                {/* <Button variant=\"info\" size=\"lg\" onClick={() => this.stop() }>\r\n                  Stop\r\n                </Button>{''} */}\r\n                <Button variant=\"info\" size=\"lg\" onClick={() => this.cleargrid() }>\r\n                  Clear the GRID\r\n                </Button>\r\n                </div>\r\n                <div className=\" info \">\r\n                <h3>\r\n                Source Node -  <Image src={red} roundedCircle width=\"25\" height=\"25\"/>{' '}\r\n                Destination Node -  <Image src={green} roundedCircle width=\"25\" height=\"25\"/>{' '}\r\n                Path from source to destination -  <Image src={yellow} roundedCircle width=\"25\" height=\"25\"/>{' '}\r\n                Obstacle - <Image src={blue} roundedCircle width=\"25\" height=\"25\"/>\r\n                </h3>\r\n                </div>\r\n                <div className=\"grid\">\r\n                  {grid.map((row, rowIdx) => {\r\n                    return (\r\n                      <div key={rowIdx}>\r\n                        {row.map((node, nodeIdx) => {\r\n                          const {row, col, dest, src, wall} = node;\r\n                          return (\r\n                            <Node\r\n                              key={nodeIdx}\r\n                              col={col}\r\n                              dest={dest}\r\n                              src={src}\r\n                              wall={wall}\r\n                              mouseIsPressed={mouseIsPressed}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) =>\r\n                                this.handleMouseEnter(row, col)\r\n                              }\r\n                              onMouseUp={(row,col) => this.handleMouseUp(row,col)}\r\n                              row={row}></Node>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                </div>\r\n                <a href='https://www.freepik.com/vectors/abstract'>Abstract vector created by BiZkettE1 - www.freepik.com</a>\r\n            </div>\r\n            );\r\n          }\r\n}\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      src: row === sr && col === sc,\r\n      dest: row === fr && col === fc,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      wall: false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n  const setPreviousSourcef = (grid,row,col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      src: false,\r\n    }\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }; \r\n  const setPreviousDestf = (grid,row,col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      dest: false,\r\n    }\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }; \r\n  const getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      wall: !node.wall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}